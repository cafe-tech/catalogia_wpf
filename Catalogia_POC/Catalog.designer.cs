#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Catalogia_POC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SANCTUARY")]
	public partial class CatalogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCatalogObject(CatalogObject instance);
    partial void UpdateCatalogObject(CatalogObject instance);
    partial void DeleteCatalogObject(CatalogObject instance);
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertCatalogCustomFields(CatalogCustomFields instance);
    partial void UpdateCatalogCustomFields(CatalogCustomFields instance);
    partial void DeleteCatalogCustomFields(CatalogCustomFields instance);
    partial void InsertCatalog(Catalog instance);
    partial void UpdateCatalog(Catalog instance);
    partial void DeleteCatalog(Catalog instance);
    partial void InsertCatalogCollection(CatalogCollection instance);
    partial void UpdateCatalogCollection(CatalogCollection instance);
    partial void DeleteCatalogCollection(CatalogCollection instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    #endregion
		
		public CatalogDataContext() : 
				base(global::Catalogia_POC.Properties.Settings.Default.CATALOGIAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CatalogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CatalogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CatalogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CatalogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CatalogObject> CatalogObjects
		{
			get
			{
				return this.GetTable<CatalogObject>();
			}
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<CatalogCustomFields> CatalogCustomFields
		{
			get
			{
				return this.GetTable<CatalogCustomFields>();
			}
		}
		
		public System.Data.Linq.Table<Catalog> Catalogs
		{
			get
			{
				return this.GetTable<Catalog>();
			}
		}
		
		public System.Data.Linq.Table<CatalogCollection> CatalogCollections
		{
			get
			{
				return this.GetTable<CatalogCollection>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class CatalogObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _obj_ID;
		
		private string _obj_Name;
		
		private string _obj_AcquisitionDate;
		
		private string _obj_CatalogDate;
		
		private string _obj_UpdatedBy;
		
		private string _obj_StatusCode;
		
		private string _OtherName;
		
		private string _OtherNumber;
		
		private string _OldNumber;
		
		private string _Accession;
		
		private string _HomeLocation;
		
		private string _Date;
		
		private string _YearRange;
		
		private string _CatalogedBy;
		
		private string _StatusDate;
		
		private string _StatusBy;
		
		private string _Status;
		
		private string _CollectionID;
		
		private EntitySet<CatalogCustomFields> _CatalogCustomFields;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(string value);
    partial void OnObjectIDChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnAcquisitionDateChanging(string value);
    partial void OnAcquisitionDateChanged();
    partial void OnCatalogDateChanging(string value);
    partial void OnCatalogDateChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnStatusCodeChanging(string value);
    partial void OnStatusCodeChanged();
    partial void OnOtherNameChanging(string value);
    partial void OnOtherNameChanged();
    partial void OnOtherNumberChanging(string value);
    partial void OnOtherNumberChanged();
    partial void OnOldNumberChanging(string value);
    partial void OnOldNumberChanged();
    partial void OnAccessionChanging(string value);
    partial void OnAccessionChanged();
    partial void OnHomeLocationChanging(string value);
    partial void OnHomeLocationChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnYearRangeChanging(string value);
    partial void OnYearRangeChanged();
    partial void OnCatalogedByChanging(string value);
    partial void OnCatalogedByChanged();
    partial void OnStatusDateChanging(string value);
    partial void OnStatusDateChanged();
    partial void OnStatusByChanging(string value);
    partial void OnStatusByChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCollectionIDChanging(string value);
    partial void OnCollectionIDChanged();
    #endregion
		
		public CatalogObject()
		{
			this._CatalogCustomFields = new EntitySet<CatalogCustomFields>(new Action<CatalogCustomFields>(this.attach_CatalogCustomFields), new Action<CatalogCustomFields>(this.detach_CatalogCustomFields));
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="objectID", Storage="_obj_ID", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string ObjectID
		{
			get
			{
				return this._obj_ID;
			}
			set
			{
				if ((this._obj_ID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._obj_ID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="objectName", Storage="_obj_Name", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectName
		{
			get
			{
				return this._obj_Name;
			}
			set
			{
				if ((this._obj_Name != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._obj_Name = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_obj_AcquisitionDate", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AcquisitionDate
		{
			get
			{
				return this._obj_AcquisitionDate;
			}
			set
			{
				if ((this._obj_AcquisitionDate != value))
				{
					this.OnAcquisitionDateChanging(value);
					this.SendPropertyChanging();
					this._obj_AcquisitionDate = value;
					this.SendPropertyChanged("AcquisitionDate");
					this.OnAcquisitionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_obj_CatalogDate", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CatalogDate
		{
			get
			{
				return this._obj_CatalogDate;
			}
			set
			{
				if ((this._obj_CatalogDate != value))
				{
					this.OnCatalogDateChanging(value);
					this.SendPropertyChanging();
					this._obj_CatalogDate = value;
					this.SendPropertyChanged("CatalogDate");
					this.OnCatalogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_obj_UpdatedBy", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UpdatedBy
		{
			get
			{
				return this._obj_UpdatedBy;
			}
			set
			{
				if ((this._obj_UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._obj_UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_obj_StatusCode", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StatusCode
		{
			get
			{
				return this._obj_StatusCode;
			}
			set
			{
				if ((this._obj_StatusCode != value))
				{
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._obj_StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherName", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OtherName
		{
			get
			{
				return this._OtherName;
			}
			set
			{
				if ((this._OtherName != value))
				{
					this.OnOtherNameChanging(value);
					this.SendPropertyChanging();
					this._OtherName = value;
					this.SendPropertyChanged("OtherName");
					this.OnOtherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherNumber", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OtherNumber
		{
			get
			{
				return this._OtherNumber;
			}
			set
			{
				if ((this._OtherNumber != value))
				{
					this.OnOtherNumberChanging(value);
					this.SendPropertyChanging();
					this._OtherNumber = value;
					this.SendPropertyChanged("OtherNumber");
					this.OnOtherNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldNumber", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OldNumber
		{
			get
			{
				return this._OldNumber;
			}
			set
			{
				if ((this._OldNumber != value))
				{
					this.OnOldNumberChanging(value);
					this.SendPropertyChanging();
					this._OldNumber = value;
					this.SendPropertyChanged("OldNumber");
					this.OnOldNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accession", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Accession
		{
			get
			{
				return this._Accession;
			}
			set
			{
				if ((this._Accession != value))
				{
					this.OnAccessionChanging(value);
					this.SendPropertyChanging();
					this._Accession = value;
					this.SendPropertyChanged("Accession");
					this.OnAccessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeLocation", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string HomeLocation
		{
			get
			{
				return this._HomeLocation;
			}
			set
			{
				if ((this._HomeLocation != value))
				{
					this.OnHomeLocationChanging(value);
					this.SendPropertyChanging();
					this._HomeLocation = value;
					this.SendPropertyChanged("HomeLocation");
					this.OnHomeLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearRange", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string YearRange
		{
			get
			{
				return this._YearRange;
			}
			set
			{
				if ((this._YearRange != value))
				{
					this.OnYearRangeChanging(value);
					this.SendPropertyChanging();
					this._YearRange = value;
					this.SendPropertyChanged("YearRange");
					this.OnYearRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogedBy", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CatalogedBy
		{
			get
			{
				return this._CatalogedBy;
			}
			set
			{
				if ((this._CatalogedBy != value))
				{
					this.OnCatalogedByChanging(value);
					this.SendPropertyChanging();
					this._CatalogedBy = value;
					this.SendPropertyChanged("CatalogedBy");
					this.OnCatalogedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDate", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StatusDate
		{
			get
			{
				return this._StatusDate;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this.OnStatusDateChanging(value);
					this.SendPropertyChanging();
					this._StatusDate = value;
					this.SendPropertyChanged("StatusDate");
					this.OnStatusDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusBy", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StatusBy
		{
			get
			{
				return this._StatusBy;
			}
			set
			{
				if ((this._StatusBy != value))
				{
					this.OnStatusByChanging(value);
					this.SendPropertyChanging();
					this._StatusBy = value;
					this.SendPropertyChanged("StatusBy");
					this.OnStatusByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogObject_CatalogCustomFields", Storage="_CatalogCustomFields", ThisKey="ObjectID", OtherKey="ObjectID")]
		public EntitySet<CatalogCustomFields> CatalogCustomFields
		{
			get
			{
				return this._CatalogCustomFields;
			}
			set
			{
				this._CatalogCustomFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CatalogObject", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.CatalogObjects.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.CatalogObjects.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(string);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogCustomFields(CatalogCustomFields entity)
		{
			this.SendPropertyChanging();
			entity.CatalogObject = this;
		}
		
		private void detach_CatalogCustomFields(CatalogCustomFields entity)
		{
			this.SendPropertyChanging();
			entity.CatalogObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _col_CollectionID;
		
		private string _col_CollectionName;
		
		private string _col_LongDescription;
		
		private string _col_ShortDescription;
		
		private EntitySet<CatalogObject> _CatalogObjects;
		
		private EntitySet<CatalogCollection> _CatalogCollections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(string value);
    partial void OnCollectionIDChanged();
    partial void OnCollectionNameChanging(string value);
    partial void OnCollectionNameChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    #endregion
		
		public Collection()
		{
			this._CatalogObjects = new EntitySet<CatalogObject>(new Action<CatalogObject>(this.attach_CatalogObjects), new Action<CatalogObject>(this.detach_CatalogObjects));
			this._CatalogCollections = new EntitySet<CatalogCollection>(new Action<CatalogCollection>(this.attach_CatalogCollections), new Action<CatalogCollection>(this.detach_CatalogCollections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col_CollectionID", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string CollectionID
		{
			get
			{
				return this._col_CollectionID;
			}
			set
			{
				if ((this._col_CollectionID != value))
				{
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._col_CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col_CollectionName", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CollectionName
		{
			get
			{
				return this._col_CollectionName;
			}
			set
			{
				if ((this._col_CollectionName != value))
				{
					this.OnCollectionNameChanging(value);
					this.SendPropertyChanging();
					this._col_CollectionName = value;
					this.SendPropertyChanged("CollectionName");
					this.OnCollectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col_LongDescription", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LongDescription
		{
			get
			{
				return this._col_LongDescription;
			}
			set
			{
				if ((this._col_LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._col_LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col_ShortDescription", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ShortDescription
		{
			get
			{
				return this._col_ShortDescription;
			}
			set
			{
				if ((this._col_ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._col_ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CatalogObject", Storage="_CatalogObjects", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<CatalogObject> CatalogObjects
		{
			get
			{
				return this._CatalogObjects;
			}
			set
			{
				this._CatalogObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CatalogCollection", Storage="_CatalogCollections", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<CatalogCollection> CatalogCollections
		{
			get
			{
				return this._CatalogCollections;
			}
			set
			{
				this._CatalogCollections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogObjects(CatalogObject entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_CatalogObjects(CatalogObject entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_CatalogCollections(CatalogCollection entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_CatalogCollections(CatalogCollection entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class CatalogCustomFields : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _cus_CategoryID;
		
		private string _cus_Obj_ID;
		
		private string _cus_Collector;
		
		private string _cus_Title;
		
		private string _cus_Artist;
		
		private string _cus_SignedName;
		
		private string _cus_SigLocation;
		
		private string _cus_Medium;
		
		private string _Technique;
		
		private string _Material;
		
		private string _CustomFieldID;
		
		private string _Description;
		
		private string _Culture;
		
		private string _School;
		
		private string _Accessories;
		
		private string _ImageSize;
		
		private string _FrameSize;
		
		private string _FrameDesc;
		
		private string _Provenance;
		
		private EntityRef<CatalogObject> _CatalogObject;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnObjectIDChanging(string value);
    partial void OnObjectIDChanged();
    partial void OnCollectorChanging(string value);
    partial void OnCollectorChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnArtistChanging(string value);
    partial void OnArtistChanged();
    partial void OnSignedNameChanging(string value);
    partial void OnSignedNameChanged();
    partial void OnSigLocationChanging(string value);
    partial void OnSigLocationChanged();
    partial void OnMediumChanging(string value);
    partial void OnMediumChanged();
    partial void OnTechniqueChanging(string value);
    partial void OnTechniqueChanged();
    partial void OnMaterialChanging(string value);
    partial void OnMaterialChanged();
    partial void OnCustomFieldIDChanging(string value);
    partial void OnCustomFieldIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCultureChanging(string value);
    partial void OnCultureChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnAccessoriesChanging(string value);
    partial void OnAccessoriesChanged();
    partial void OnImageSizeChanging(string value);
    partial void OnImageSizeChanged();
    partial void OnFrameSizeChanging(string value);
    partial void OnFrameSizeChanged();
    partial void OnFrameDescChanging(string value);
    partial void OnFrameDescChanged();
    partial void OnProvenanceChanging(string value);
    partial void OnProvenanceChanged();
    #endregion
		
		public CatalogCustomFields()
		{
			this._CatalogObject = default(EntityRef<CatalogObject>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_CategoryID", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CategoryID
		{
			get
			{
				return this._cus_CategoryID;
			}
			set
			{
				if ((this._cus_CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._cus_CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_Obj_ID", AutoSync=AutoSync.OnInsert, DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectID
		{
			get
			{
				return this._cus_Obj_ID;
			}
			set
			{
				if ((this._cus_Obj_ID != value))
				{
					if (this._CatalogObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._cus_Obj_ID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_Collector", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Collector
		{
			get
			{
				return this._cus_Collector;
			}
			set
			{
				if ((this._cus_Collector != value))
				{
					this.OnCollectorChanging(value);
					this.SendPropertyChanging();
					this._cus_Collector = value;
					this.SendPropertyChanged("Collector");
					this.OnCollectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_Title", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._cus_Title;
			}
			set
			{
				if ((this._cus_Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._cus_Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_Artist", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Artist
		{
			get
			{
				return this._cus_Artist;
			}
			set
			{
				if ((this._cus_Artist != value))
				{
					this.OnArtistChanging(value);
					this.SendPropertyChanging();
					this._cus_Artist = value;
					this.SendPropertyChanged("Artist");
					this.OnArtistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_SignedName", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SignedName
		{
			get
			{
				return this._cus_SignedName;
			}
			set
			{
				if ((this._cus_SignedName != value))
				{
					this.OnSignedNameChanging(value);
					this.SendPropertyChanging();
					this._cus_SignedName = value;
					this.SendPropertyChanged("SignedName");
					this.OnSignedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_SigLocation", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SigLocation
		{
			get
			{
				return this._cus_SigLocation;
			}
			set
			{
				if ((this._cus_SigLocation != value))
				{
					this.OnSigLocationChanging(value);
					this.SendPropertyChanging();
					this._cus_SigLocation = value;
					this.SendPropertyChanged("SigLocation");
					this.OnSigLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_Medium", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Medium
		{
			get
			{
				return this._cus_Medium;
			}
			set
			{
				if ((this._cus_Medium != value))
				{
					this.OnMediumChanging(value);
					this.SendPropertyChanging();
					this._cus_Medium = value;
					this.SendPropertyChanged("Medium");
					this.OnMediumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technique", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Technique
		{
			get
			{
				return this._Technique;
			}
			set
			{
				if ((this._Technique != value))
				{
					this.OnTechniqueChanging(value);
					this.SendPropertyChanging();
					this._Technique = value;
					this.SendPropertyChanged("Technique");
					this.OnTechniqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Material", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				if ((this._Material != value))
				{
					this.OnMaterialChanging(value);
					this.SendPropertyChanging();
					this._Material = value;
					this.SendPropertyChanged("Material");
					this.OnMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldID", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string CustomFieldID
		{
			get
			{
				return this._CustomFieldID;
			}
			set
			{
				if ((this._CustomFieldID != value))
				{
					this.OnCustomFieldIDChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldID = value;
					this.SendPropertyChanged("CustomFieldID");
					this.OnCustomFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Culture", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Culture
		{
			get
			{
				return this._Culture;
			}
			set
			{
				if ((this._Culture != value))
				{
					this.OnCultureChanging(value);
					this.SendPropertyChanging();
					this._Culture = value;
					this.SendPropertyChanged("Culture");
					this.OnCultureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accessories", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Accessories
		{
			get
			{
				return this._Accessories;
			}
			set
			{
				if ((this._Accessories != value))
				{
					this.OnAccessoriesChanging(value);
					this.SendPropertyChanging();
					this._Accessories = value;
					this.SendPropertyChanged("Accessories");
					this.OnAccessoriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSize", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ImageSize
		{
			get
			{
				return this._ImageSize;
			}
			set
			{
				if ((this._ImageSize != value))
				{
					this.OnImageSizeChanging(value);
					this.SendPropertyChanging();
					this._ImageSize = value;
					this.SendPropertyChanged("ImageSize");
					this.OnImageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrameSize", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FrameSize
		{
			get
			{
				return this._FrameSize;
			}
			set
			{
				if ((this._FrameSize != value))
				{
					this.OnFrameSizeChanging(value);
					this.SendPropertyChanging();
					this._FrameSize = value;
					this.SendPropertyChanged("FrameSize");
					this.OnFrameSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrameDesc", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FrameDesc
		{
			get
			{
				return this._FrameDesc;
			}
			set
			{
				if ((this._FrameDesc != value))
				{
					this.OnFrameDescChanging(value);
					this.SendPropertyChanging();
					this._FrameDesc = value;
					this.SendPropertyChanged("FrameDesc");
					this.OnFrameDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provenance", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Provenance
		{
			get
			{
				return this._Provenance;
			}
			set
			{
				if ((this._Provenance != value))
				{
					this.OnProvenanceChanging(value);
					this.SendPropertyChanging();
					this._Provenance = value;
					this.SendPropertyChanged("Provenance");
					this.OnProvenanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogObject_CatalogCustomFields", Storage="_CatalogObject", ThisKey="ObjectID", OtherKey="ObjectID", IsForeignKey=true)]
		public CatalogObject CatalogObject
		{
			get
			{
				return this._CatalogObject.Entity;
			}
			set
			{
				CatalogObject previousValue = this._CatalogObject.Entity;
				if (((previousValue != value) 
							|| (this._CatalogObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogObject.Entity = null;
						previousValue.CatalogCustomFields.Remove(this);
					}
					this._CatalogObject.Entity = value;
					if ((value != null))
					{
						value.CatalogCustomFields.Add(this);
						this._cus_Obj_ID = value.ObjectID;
					}
					else
					{
						this._cus_Obj_ID = default(string);
					}
					this.SendPropertyChanged("CatalogObject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CatalogCustomFields", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CatalogCustomFields.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CatalogCustomFields.Add(this);
						this._cus_CategoryID = value.CategoryID;
					}
					else
					{
						this._cus_CategoryID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Catalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _CatalogID;
		
		private EntitySet<CatalogCollection> _CatalogCollections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCatalogIDChanging(string value);
    partial void OnCatalogIDChanged();
    #endregion
		
		public Catalog()
		{
			this._CatalogCollections = new EntitySet<CatalogCollection>(new Action<CatalogCollection>(this.attach_CatalogCollections), new Action<CatalogCollection>(this.detach_CatalogCollections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_CatalogCollection", Storage="_CatalogCollections", ThisKey="CatalogID", OtherKey="CatalogID")]
		public EntitySet<CatalogCollection> CatalogCollections
		{
			get
			{
				return this._CatalogCollections;
			}
			set
			{
				this._CatalogCollections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogCollections(CatalogCollection entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = this;
		}
		
		private void detach_CatalogCollections(CatalogCollection entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class CatalogCollection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CatalogCollectionID;
		
		private string _CatalogID;
		
		private string _CollectionID;
		
		private EntityRef<Catalog> _Catalog;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalogCollectionIDChanging(string value);
    partial void OnCatalogCollectionIDChanged();
    partial void OnCatalogIDChanging(string value);
    partial void OnCatalogIDChanged();
    partial void OnCollectionIDChanging(string value);
    partial void OnCollectionIDChanged();
    #endregion
		
		public CatalogCollection()
		{
			this._Catalog = default(EntityRef<Catalog>);
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogCollectionID", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string CatalogCollectionID
		{
			get
			{
				return this._CatalogCollectionID;
			}
			set
			{
				if ((this._CatalogCollectionID != value))
				{
					this.OnCatalogCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogCollectionID = value;
					this.SendPropertyChanged("CatalogCollectionID");
					this.OnCatalogCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="varchar(50)", CanBeNull=false)]
		public string CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					if (this._Catalog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_CatalogCollection", Storage="_Catalog", ThisKey="CatalogID", OtherKey="CatalogID", IsForeignKey=true)]
		public Catalog Catalog
		{
			get
			{
				return this._Catalog.Entity;
			}
			set
			{
				Catalog previousValue = this._Catalog.Entity;
				if (((previousValue != value) 
							|| (this._Catalog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalog.Entity = null;
						previousValue.CatalogCollections.Remove(this);
					}
					this._Catalog.Entity = value;
					if ((value != null))
					{
						value.CatalogCollections.Add(this);
						this._CatalogID = value.CatalogID;
					}
					else
					{
						this._CatalogID = default(string);
					}
					this.SendPropertyChanged("Catalog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CatalogCollection", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.CatalogCollections.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.CatalogCollections.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(string);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryID;
		
		private string _CategoryDesc;
		
		private EntitySet<CatalogCustomFields> _CatalogCustomFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryDescChanging(string value);
    partial void OnCategoryDescChanged();
    #endregion
		
		public Category()
		{
			this._CatalogCustomFields = new EntitySet<CatalogCustomFields>(new Action<CatalogCustomFields>(this.attach_CatalogCustomFields), new Action<CatalogCustomFields>(this.detach_CatalogCustomFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="varchar(36)", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="varchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this.OnCategoryDescChanging(value);
					this.SendPropertyChanging();
					this._CategoryDesc = value;
					this.SendPropertyChanged("CategoryDesc");
					this.OnCategoryDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CatalogCustomFields", Storage="_CatalogCustomFields", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<CatalogCustomFields> CatalogCustomFields
		{
			get
			{
				return this._CatalogCustomFields;
			}
			set
			{
				this._CatalogCustomFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogCustomFields(CatalogCustomFields entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CatalogCustomFields(CatalogCustomFields entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
}
#pragma warning restore 1591
